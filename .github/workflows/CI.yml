# This file is autogenerated by maturin v1.9.3
# To update, run
#
#    maturin generate-ci github --manifest-path py-kola/Cargo.toml
#
name: Kola CI

on:
  workflow_dispatch:
    inputs:
      # Latest commit to include with the release. If omitted, use the latest commit on the main branch.
      sha:
        description: Commit SHA
        type: string
      # Create the sdist and build the wheels, but do not publish to PyPI / GitHub.
      dry-run:
        description: Dry run
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set RUSTFLAGS for x86-64
        if: matrix.platform.target == 'x86-64'
        run: echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:         
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path py-kola/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            case "${{ matrix.platform.target }}" in
              "aarch64" | "armv7" | "s390x" | "ppc64le")
                # NOTE: pypa/manylinux docker images are Debian based
                sudo apt-get update
                sudo apt-get install -y pkg-config openssl libssl-dev
                # Leave these find commands here in case we need in future
                find / -name libssl*
                find / -name openssl*.h
                pushd /usr/include/openssl
                ln -s /usr/include/x86_64-linux-gnu/openssl/opensslconf.h opensslconf.h
                ln -s /usr/include/x86_64-linux-gnu/openssl/configuration.h configuration.h
                popd
                export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
                export OPENSSL_INCLUDE_DIR=/usr/include
                ;;
              "x86" | "x86_64" )
                # NOTE: rust-cross/manylinux docker images are CentOS based
                yum update -y
                yum install -y openssl openssl-devel
                ;;
            esac
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Set RUSTFLAGS for x86-64
        if: matrix.platform.target == 'x86-64'
        run: echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path py-kola/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set RUSTFLAGS for x86-64
        if: matrix.platform.target == 'x86-64'
        run: echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path py-kola/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path py-kola/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux, windows, macos, sdist]
    environment:
      name: pypi
      url: https://pypi.org/project/kola
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: inputs.dry-run == false
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
